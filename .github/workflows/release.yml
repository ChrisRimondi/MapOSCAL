name: Release Validation

on:
  release:
    types: [published, created]

env:
  PYTHON_VERSION: "3.11"

jobs:
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r maposcal/ -f json -o bandit-report.json || true
          bandit -r maposcal/ -f txt -o bandit-report.txt || true

      - name: Run Safety check for known vulnerabilities
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          safety check --output safety-report.txt || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            bandit-report.txt
            safety-report.json
            safety-report.txt

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run tests with coverage
        run: |
          pytest --cov=maposcal --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            htmlcov/
            .coverage
            coverage.xml

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Black formatter check
        run: black --check --diff maposcal/ tests/

      - name: Run Ruff linter
        run: ruff check maposcal/ tests/

      - name: Run MyPy type checker
        run: mypy maposcal/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release summary
        run: |
          echo "## Release Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code Quality: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Checks: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Package Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "If all checks pass, the package will be automatically published to PyPI." >> $GITHUB_STEP_SUMMARY 